// Code generated by MockGen. DO NOT EDIT.
// Source: operation.go

// Package main is a generated GoMock package.
package main

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockOperation is a mock of Operation interface.
type MockOperation struct {
	ctrl     *gomock.Controller
	recorder *MockOperationMockRecorder
}

// MockOperationMockRecorder is the mock recorder for MockOperation.
type MockOperationMockRecorder struct {
	mock *MockOperation
}

// NewMockOperation creates a new mock instance.
func NewMockOperation(ctrl *gomock.Controller) *MockOperation {
	mock := &MockOperation{ctrl: ctrl}
	mock.recorder = &MockOperationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOperation) EXPECT() *MockOperationMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockOperation) Do(in Input) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Do", in)
}

// Do indicates an expected call of Do.
func (mr *MockOperationMockRecorder) Do(in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockOperation)(nil).Do), in)
}

// MockOperationHistory is a mock of OperationHistory interface.
type MockOperationHistory struct {
	ctrl     *gomock.Controller
	recorder *MockOperationHistoryMockRecorder
}

// MockOperationHistoryMockRecorder is the mock recorder for MockOperationHistory.
type MockOperationHistoryMockRecorder struct {
	mock *MockOperationHistory
}

// NewMockOperationHistory creates a new mock instance.
func NewMockOperationHistory(ctrl *gomock.Controller) *MockOperationHistory {
	mock := &MockOperationHistory{ctrl: ctrl}
	mock.recorder = &MockOperationHistoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOperationHistory) EXPECT() *MockOperationHistoryMockRecorder {
	return m.recorder
}

// GetLastRecord mocks base method.
func (m *MockOperationHistory) GetLastRecord(n float64, offset int) []Input {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastRecord", n, offset)
	ret0, _ := ret[0].([]Input)
	return ret0
}

// GetLastRecord indicates an expected call of GetLastRecord.
func (mr *MockOperationHistoryMockRecorder) GetLastRecord(n, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastRecord", reflect.TypeOf((*MockOperationHistory)(nil).GetLastRecord), n, offset)
}

// Store mocks base method.
func (m *MockOperationHistory) Store(in Input) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Store", in)
}

// Store indicates an expected call of Store.
func (mr *MockOperationHistoryMockRecorder) Store(in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockOperationHistory)(nil).Store), in)
}
